import React from 'react'
import { StyleSheet, View, Text, Image, TouchableOpacity, Animated, Easing, Dimensions } from 'react-native'
import { getImageFromApi } from '../API/TMDBApi'
import FadeIn from '../Animations/FadeIn';

  class FilmItem extends React.Component {


    _displayFavoriteImage() {
      if(this.props.isFilmFavorite) {
        return (
          <Image
            style={styles.favorite_image}
            source={require('../Images/ic_favorite.png')}
          />
        )
      }
    }
    
    render() {

      const { film, displayDetailForFilm } = this.props

      return (

        <FadeIn>
          <TouchableOpacity
            style={styles.main_container}
            onPress={ () => displayDetailForFilm(film.id) }>

            <Image style={styles.image} source={ { uri: getImageFromApi(film.poster_path) } } />
            <View style={styles.content_container}>

              <View style={styles.header_container}>
            
              {this._displayFavoriteImage()}

                <Text style={styles.title_text}>{film.title}</Text>
                <Text style={styles.vote_text}>{film.vote_average}</Text>
              </View>

              <View style={styles.description_container}>
                <Text style={styles.description_text} numberOfLines={6}>{film.overview}</Text>
              </View>
              <View style={styles.date_container}>
                <Text style={styles.date_text}>Sorti le {film.release_date}</Text>
              </View>
          </View>
        </TouchableOpacity>
      </FadeIn>

      )
    }
  }

const styles = StyleSheet.create({

main_container: {
  height: 190,
  flexDirection: 'row'
},
image: {
  width: 120,
  height: 180,
  margin: 5,
  backgroundColor: 'gray'
},
content_container: {
  flex: 1,
  margin: 5
},
header_container: {
  flex: 3,
  flexDirection: 'row'
},
title_text: {
  fontWeight: 'bold',
  fontSize: 20,
  flex: 1,
  flexWrap: 'wrap',
  paddingRight: 5
},
vote_text: {
  fontWeight: 'bold',
  fontSize: 26,
  color: '#666666'
},
description_container: {
  flex: 7
},
description_text: {
  fontStyle: 'italic',
  color: '#666666'
},
date_container: {
  flex: 1
},
date_text: {
  textAlign: 'right',
  fontSize: 14
},
favorite_image: {
  width: 25,
  height: 25,
  marginRight: 5
}
})
export default FilmItem

/**
TouchableOpacity
----------------
Un TouchableOpacity n'est en soi qu'une "enveloppe" permettant √† vos vues d'√™tre cliquables. Vous verrez,on en utilise beaucoup. View = pas clickable

Fonctionnalit√©: ajout d'un coeur si film en fav
-----------------------------------------------

Vous avez ici deux solutions pour r√©aliser cette fonctionnalit√©.

La premi√®re consiste √† connecter le store Redux au component FilmItem ; c‚Äôest la solution la plus simple, mais pas la plus optimis√©e. Avec cette solution, vous allez connecter le store Redux autant de fois qu‚Äôil y a de components FilmItem. Autrement dit, si vous affichez 100 films, vous allez connecter 100 fois le store Redux, ce n‚Äôest pas terrible.

La deuxi√®me solution, plus propre, mais plus complexe, consiste √† connecter le store Redux une seule fois dans le component Search, puis de faire passer √† nos components FilmItem une prop  isFilmFavorite  (qui vaut  true  ou  false  ) qui affichera, ou non, le üñ§dans nos items.

Il n‚Äôy a rien de si compliqu√© l√†-dedans ? Il est o√π, le pi√®ge ? üßê

Le pi√®ge, ce sont les listes de donn√©es sur React Native, les FlatList. Les listes de donn√©es sont pens√©es pour afficher √©norm√©ment de donn√©es, des centaines d‚Äôitems, voire des milliers. De ce fait, elles se doivent d‚Äô√™tre optimis√©es au maximum, sans quoi notre application en serait ralentie.

Parmi les optimisations qu‚Äôelles poss√®dent, il y en a une qui peut se traduire par :

Moi, FlatList, je ne me re-rend que si l‚Äôon me le demande ET si mes donn√©es ont chang√©.

Vous voyez o√π je veux en venir ? Revenons √† notre application et √† la fonctionnalit√© que l‚Äôon souhaite mettre en place ici, ce sera plus simple. ;)

Actuellement, notre liste de donn√©es, notre FlatList, affiche une liste de films  this.state.films  . Lorsque vous aurez connect√© le store Redux au component Search, vous aurez acc√®s aux films favoris  this.props.favoritesFilm  .

Imaginons maintenant que vous ajoutiez un film aux favoris ; vous √™tes d‚Äôaccord avec moi pour dire que la liste des films favoris  this.props.favoritesFilm  va changer. Mais qu‚Äôen est-il de notre liste de films  this.state.films  ? Elle, elle ne change pas. Nous n‚Äôavons pas r√©cup√©r√© de nouveaux films de l‚ÄôAPI au moment d‚Äôajouter un film √† nos favoris.

Du coup, lorsque vous allez ajouter un film aux favoris, le component Search va entrer dans le cycle de vie updating. Il va appeler son  render  , demander √† notre FlatList de se re-rendre, mais cette derni√®re va r√©pondre :

Oui, j‚Äôai bien compris que l‚Äôon me demande de me re-rendre, MAIS mes donn√©es n‚Äôont pas chang√©, donc je reste comme je suis et je ne me re-rends pas.

Ce qui, au niveau de notre application, fera que l‚Äôon ne re-rend jamais les items de notre FlatList (FilmItem) et donc que l‚Äôon n‚Äôaffiche jamais l‚Äôimage des favoris üñ§√† c√¥t√© du titre du film.

Donc la deuxi√®me solution ne marche pas ? On repart sur la premi√®re solution ?

Attendez, attendez ! Je n‚Äôai pas termin√©. :D React Native propose une solution √† notre probl√®me. Cette solution, c‚Äôest la prop extraData d‚Äôune FlatList. Elle permet de dire √† notre FlatList de se re-rendre si ses donn√©es et d‚Äôautres donn√©es (ajout√©es dans extraData) ont chang√©.

Ici, lorsque vous aurez connect√© le store Redux au component Search, vous pourrez ajouter la prop extraData sur la FlatList :

extraData={this.props.favoritesFilm}
Cela devrait beaucoup mieux fonctionner. ;)

Ce comportement est d√ª au fait que les FlatList sur React Native sont des PureComponent. Si ce c√¥t√© technique et avanc√© de React Native vous int√©resse, vous trouverez plus d‚Äôinformations sur la documentation React des PureComponent.

Je ferme cette longue parenth√®se sur le comportement des FlatList et vous laisse travailler. :p

Normalement, hormis la prop  extraData  , il n'y a pas de pi√®ge. Essayez de r√©aliser cette fonctionnalit√© par vous-m√™me, cela vous permettra de manipuler Redux et son fonctionnement. Pour information, ici, pas de besoin de toucher au reducer ni au store, on a d√©j√† tout ce qu'il nous faut pour faire cette fonctionnalit√©.

 */